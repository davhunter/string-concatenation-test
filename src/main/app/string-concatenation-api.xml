<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:context="http://www.springframework.org/schema/context" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/apikit http://www.mulesoft.org/schema/mule/apikit/current/mule-apikit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
    <http:listener-config name="string-concatenation-api-httpListenerConfig" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <apikit:config name="string-concatenation-api-config" raml="string-concatenation-api.raml" consoleEnabled="false" doc:name="Router"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8081" basePath="/sca/" doc:name="HTTP Request Configuration">
        <http:raml-api-configuration location="string-concatenation-api.raml"/>
    </http:request-config>
    <context:property-placeholder location="tsc-${mule.env}.properties"/>
    <queued-asynchronous-processing-strategy name="Queued_Asynchronous_Processing_Strategy" maxThreads="80" minThreads="16" threadTTL="10000" doc:name="Queued Asynchronous Processing Strategy"/>
    <flow name="string-concatenation-api-main">
        <http:listener config-ref="string-concatenation-api-httpListenerConfig" path="/sca/*" doc:name="HTTP"/>
        <apikit:router config-ref="string-concatenation-api-config" doc:name="APIkit Router"/>
        <exception-strategy ref="string-concatenation-api-apiKitGlobalExceptionMapping" doc:name="Reference Exception Strategy"/>
    </flow>
    <flow name="string-concatenation-api-console">
        <http:listener config-ref="string-concatenation-api-httpListenerConfig" path="/console/*" doc:name="HTTP"/>
        <apikit:console config-ref="string-concatenation-api-config" doc:name="APIkit Console"/>
    </flow>
    <flow name="get:/test:string-concatenation-api-config">
        <set-variable variableName="numIterations" value="#[Integer.parseInt(message.inboundProperties.'http.query.params'.numIterations)]" doc:name="Set Num Iterations"/>
        <set-variable variableName="testType" value="#[message.inboundProperties.'http.query.params'.testType]" doc:name="Set Test Type"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.testType == &quot;StringBuilder&quot;]">
        		<set-variable variableName="startTime" value="#[server.nanoTime()]" doc:name="Set Start Time"/>
                <custom-transformer class="com.deloitte.tsc.transformers.StringBuilderTransformer" doc:name="StringBuilder Execution">
                    <spring:property name="messageToAppend" value="${test.configuration.message}"/>
                </custom-transformer>
        		<set-variable variableName="endTime" value="#[server.nanoTime()]" doc:name="Set End Time"/>
            </when>
            <when expression="#[flowVars.testType == &quot;StringBuffer&quot;]">
        		<set-variable variableName="startTime" value="#[server.nanoTime()]" doc:name="Set Start Time"/>
		        <custom-transformer class="com.deloitte.tsc.transformers.StringBufferTransformer" doc:name="StringBuffer Execution">
                    <spring:property name="messageToAppend" value="${test.configuration.message}"/>
		        </custom-transformer>
        		<set-variable variableName="endTime" value="#[server.nanoTime()]" doc:name="Set End Time"/>
            </when>
            <otherwise>
        		<set-variable variableName="startTime" value="#[server.nanoTime()]" doc:name="Set Start Time"/>
                <custom-transformer class="com.deloitte.tsc.transformers.StringConcatenationTransformer" doc:name="String Concat Execution">
                </custom-transformer>
        		<set-variable variableName="endTime" value="#[server.nanoTime()]" doc:name="Set End Time"/>
            </otherwise>
        </choice>
        <set-payload value="{
     &quot;testType&quot;: &quot;#[flowVars.testType or &quot;String Concatenation&quot;]&quot;,
      &quot;completedInMillis&quot;: #[(flowVars.endTime - flowVars.startTime) / 1000000],
      &quot;completedInNanos&quot;: #[flowVars.endTime - flowVars.startTime],      
      &quot;numIterations&quot;: #[flowVars.numIterations]  
}" mimeType="application/json" doc:name="Set Payload"/>
    </flow>
    <flow name="get:/testDriver:string-concatenation-api-config">
        <set-variable doc:name="Set Num Iterations" value="#[Integer.parseInt(message.inboundProperties.'http.query.params'.numIterations)]" variableName="numIterations"/>
        <set-variable doc:name="Set Test Type" value="#[message.inboundProperties.'http.query.params'.testType]" variableName="testType"/>
        <dw:transform-message doc:name="Generate Requests Array">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java

---
(1 to p('testdriver.configuration.numIterations'))
	map {
		testType: flowVars.testType,
		numIterations: flowVars.numIterations
	} as :object {class: "com.deloitte.tsc.cdm.TestRequest"}]]></dw:set-payload>
        </dw:transform-message>
        <request-reply doc:name="Request-Reply">
            <vm:outbound-endpoint exchange-pattern="one-way" path="splitRequestRecords" doc:name="Sent to Q for Message Splitting"/>
            <vm:inbound-endpoint exchange-pattern="one-way" path="SPReturn" doc:name="Listen to Q for Aggregated Finished Processing"/>
        </request-reply>
        <custom-transformer class="com.deloitte.tsc.transformers.TestDriverResultTransformer" doc:name="Calculate Results for Response"/>
    </flow>
    <flow name="splitRequestRecordsFlow">
        <vm:inbound-endpoint exchange-pattern="one-way" path="splitRequestRecords" doc:name="Listen to Q for Message Splitting"/>
        <collection-splitter doc:name="Collection Splitter"/>
        <vm:outbound-endpoint exchange-pattern="one-way" path="processRequest" doc:name="Send to Q for Message Processing"/>
    </flow>
    <flow name="processRequestFlow" processingStrategy="Queued_Asynchronous_Processing_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way" path="processRequest" doc:name="Listen to Q for Message Processing"/>
        <enricher target="#[variable:apiResponse]" doc:name="Call API">
            <processor-chain doc:name="Processor Chain">
                <http:request config-ref="HTTP_Request_Configuration" path="/test" method="GET" doc:name="Call Test API">
                    <http:request-builder>
                        <http:query-param paramName="testType" value="#[payload.testType]"/>
                        <http:query-param paramName="numIterations" value="#[payload.numIterations]"/>
                    </http:request-builder>
                </http:request>
                <json:json-to-object-transformer returnClass="com.deloitte.tsc.cdm.TestResult" doc:name="API Response to CDM"/>
            </processor-chain>
        </enricher>
        <expression-component doc:name="Add API Result to Test Request"><![CDATA[payload.testResult = flowVars.apiResponse]]></expression-component>
        <collection-aggregator failOnTimeout="true" doc:name="Collection Aggregator"/>
        <vm:outbound-endpoint exchange-pattern="one-way" path="SPReturn" doc:name="Send to Q for Aggregated Finished Processing"/>
    </flow>
    <apikit:mapping-exception-strategy name="string-concatenation-api-apiKitGlobalExceptionMapping">
        <apikit:mapping statusCode="404">
            <apikit:exception value="org.mule.module.apikit.exception.NotFoundException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Resource not found&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="405">
            <apikit:exception value="org.mule.module.apikit.exception.MethodNotAllowedException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Method not allowed&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="415">
            <apikit:exception value="org.mule.module.apikit.exception.UnsupportedMediaTypeException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Unsupported media type&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="406">
            <apikit:exception value="org.mule.module.apikit.exception.NotAcceptableException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Not acceptable&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
        <apikit:mapping statusCode="400">
            <apikit:exception value="org.mule.module.apikit.exception.BadRequestException" />
            <set-property propertyName="Content-Type" value="application/json" doc:name="Property"/>
            <set-payload value="{ &quot;message&quot;: &quot;Bad request&quot; }" doc:name="Set Payload"/>
        </apikit:mapping>
    </apikit:mapping-exception-strategy>
</mule>
